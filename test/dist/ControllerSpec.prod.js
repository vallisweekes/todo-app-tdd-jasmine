"use strict";describe("Controller",function(){function t(o){i.read.and.callFake(function(e,t){(t=t||e)(o)}),i.getCount.and.callFake(function(e){e({active:o.filter(function(e){return!e.completed}).length,completed:o.filter(function(e){return!!e.completed}).length,total:o.length})}),i.remove.and.callFake(function(e,t){t()}),i.create.and.callFake(function(e,t){t()}),i.update.and.callFake(function(e,t,o){o()})}var o,i,n;beforeEach(function(){i=jasmine.createSpyObj("model",["read","getCount","remove","create","update"]),n=function(){var o={};return{render:jasmine.createSpy("render"),bind:function(e,t){o[e]=t},trigger:function(e,t){o[e](t)}}}(),o=new app.Controller(i,n),console.log(o.view)}),it("should show entries on start-up",function(){var e=n.render;o.setView(""),expect(e).toHaveBeenCalled(),expect(e).toHaveBeenCalledTimes(1)}),describe("routing",function(){it("should show all entries without a route",function(){var e={title:"my todo"};t([e]),o.setView(""),expect(n.render).toHaveBeenCalledWith("showEntries",[e])}),it('should show all entries without "all" route',function(){var e={title:"my todo"};t([e]),o.setView("#/"),expect(n.render).toHaveBeenCalledWith("showEntries",[e])}),it("should show active entries",function(){var e={title:"my todo"};t([e]),o.setView(""),expect(n.render).toHaveBeenCalledWith("showEntries",[e])}),it("should show completed entries",function(){spyOn(window.app.Controller.prototype,"showCompleted");var e={title:"my todo",completed:!0};i.read.and.callFake(function(){n.render("showEntries",e)}),o.setView(""),expect(n.render).toHaveBeenCalledWith("showEntries",e),expect(n.render).toHaveBeenCalledTimes(2)})}),it("should show the content block when todos exists",function(){t([{title:"my todo",completed:!0}]),o.setView(""),expect(n.render).toHaveBeenCalledWith("contentBlockVisibility",{visible:!0})}),it("should hide the content block when no todos exists",function(){t([]),o.setView(""),expect(n.render).toHaveBeenCalledWith("contentBlockVisibility",{visible:!1})}),it("should check the toggle all button, if all todos are completed",function(){t([{title:"my todo",completed:!0}]),o.setView(""),expect(n.render).toHaveBeenCalledWith("toggleAll",{checked:!0})}),it('should set the "clear completed" button',function(){t([{id:12,title:"my todo",completed:!0}]),o.setView(""),expect(n.render).toHaveBeenCalledWith("clearCompletedButton",{completed:1,visible:!0})}),it('should highlight "All" filter by default',function(){o.setView(""),expect(n.render).toHaveBeenCalled()}),it('should highlight "Active" filter when switching to active view',function(){o.setView(""),n.render("setFilter","currentPage"),expect(n.render).toHaveBeenCalled()}),describe("toggle all",function(){it("should toggle all todos to completed",function(){var e=spyOn(window.app.Controller.prototype,"toggleAll");e(status.completed),expect(e).toHaveBeenCalledTimes(1),expect(e).toHaveBeenCalledWith(status.completed)}),it("should update the view",function(){console.log(o.setView(""))})}),describe("new todo",function(){it("should add a new todo to the model",function(){t([]),o.setView(""),n.trigger("newTodo","title"),expect(i.create).toHaveBeenCalled(),expect(i.create).toHaveBeenCalledTimes(1),expect(i.create).toHaveBeenCalledWith("title",jasmine.any(Function))}),it("should add a new todo to the view",function(){t([]),o.setView(""),n.render.calls.reset(),i.read.calls.reset(),i.read.and.callFake(function(e){e([{title:"a new todo",completed:!1}])}),n.trigger("newTodo","a new todo"),expect(i.read).toHaveBeenCalled(),expect(n.render).toHaveBeenCalledWith("showEntries",[{title:"a new todo",completed:!1}])}),it("should clear the input field when a new todo is added",function(){t([]),o.setView(""),n.trigger("newTodo","a new todo"),expect(n.render).toHaveBeenCalledWith("clearNewTodo")})}),describe("element removal",function(){it("should remove an entry from the model",function(){t([{id:42,title:"my todo",completed:!0}]),o.setView(""),n.trigger("itemRemove",{id:42}),expect(i.remove).toHaveBeenCalledWith(42,jasmine.any(Function))}),it("should remove an entry from the view",function(){t([{id:42,title:"my todo",completed:!0}]),o.setView(""),n.trigger("itemRemove",{id:42}),expect(n.render).toHaveBeenCalledWith("removeItem",42)}),it("should update the element count",function(){t([{id:42,title:"my todo",completed:!0}]),o.setView(""),n.trigger("itemRemove",{id:42}),expect(n.render).toHaveBeenCalledWith("updateElementCount",0)})}),describe("remove completed",function(){it("should remove a completed entry from the model",function(){t([{id:42,title:"my todo",completed:!0}]),o.setView(""),n.trigger("removeCompleted"),expect(i.read).toHaveBeenCalledWith({completed:!0},jasmine.any(Function)),expect(i.remove).toHaveBeenCalledWith(42,jasmine.any(Function))}),it("should remove a completed entry from the view",function(){t([{id:42,title:"my todo",completed:!0}]),o.setView(""),n.trigger("removeCompleted"),expect(n.render).toHaveBeenCalledWith("removeItem",42)})}),describe("element complete toggle",function(){it("should update the model",function(){t([{id:21,title:"my todo",completed:!1}]),o.setView(""),n.trigger("itemToggle",{id:21,completed:!0}),expect(i.update).toHaveBeenCalledWith(21,{completed:!0},jasmine.any(Function))}),it("should update the view",function(){t([{id:42,title:"my todo",completed:!0}]),o.setView(""),n.trigger("itemToggle",{id:42,completed:!1}),expect(n.render).toHaveBeenCalledWith("elementComplete",{id:42,completed:!1})})}),describe("edit item",function(){it("should switch to edit mode",function(){t([{id:21,title:"my todo",completed:!1}]),o.setView(""),n.trigger("itemEdit",{id:21}),expect(n.render).toHaveBeenCalledWith("editItem",{id:21,title:"my todo"})}),it("should leave edit mode on done",function(){t([{id:21,title:"my todo",completed:!1}]),o.setView(""),n.trigger("itemEditDone",{id:21,title:"new title"}),expect(n.render).toHaveBeenCalledWith("editItemDone",{id:21,title:"new title"})}),it("should persist the changes on done",function(){t([{id:21,title:"my todo",completed:!1}]),o.setView(""),n.trigger("itemEditDone",{id:21,title:"new title"}),expect(i.update).toHaveBeenCalledWith(21,{title:"new title"},jasmine.any(Function))}),it("should remove the element from the model when persisting an empty title",function(){t([{id:21,title:"my todo",completed:!1}]),o.setView(""),n.trigger("itemEditDone",{id:21,title:""}),expect(i.remove).toHaveBeenCalledWith(21,jasmine.any(Function))}),it("should remove the element from the view when persisting an empty title",function(){t([{id:21,title:"my todo",completed:!1}]),o.setView(""),n.trigger("itemEditDone",{id:21,title:""}),expect(n.render).toHaveBeenCalledWith("removeItem",21)}),it("should leave edit mode on cancel",function(){t([{id:21,title:"my todo",completed:!1}]),o.setView(""),n.trigger("itemEditCancel",{id:21}),expect(n.render).toHaveBeenCalledWith("editItemDone",{id:21,title:"my todo"})}),it("should not persist the changes on cancel",function(){t([{id:21,title:"my todo",completed:!1}]),o.setView(""),n.trigger("itemEditCancel",{id:21}),expect(i.update).not.toHaveBeenCalled()})})});